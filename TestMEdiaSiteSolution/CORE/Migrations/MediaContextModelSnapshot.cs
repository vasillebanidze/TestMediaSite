// <auto-generated />
using CORE.DbContexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CORE.Migrations
{
    [DbContext(typeof(MediaContext))]
    partial class MediaContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CORE.Entities.Media", b =>
                {
                    b.Property<int>("MediaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MediaId"));

                    b.Property<string>("MediaTitle")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("MediaTypeId")
                        .HasColumnType("int");

                    b.Property<string>("PictureUrl")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("MediaId")
                        .HasName("PK_MediaId");

                    b.HasIndex("MediaTypeId");

                    b.ToTable("Medias", "dbo");
                });

            modelBuilder.Entity("CORE.Entities.MediaType", b =>
                {
                    b.Property<int>("MediaTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MediaTypeId"));

                    b.Property<string>("MediaTypeTitle")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("MediaTypeId")
                        .HasName("PK_MediaTypeId");

                    b.HasIndex(new[] { "MediaTypeTitle" }, "UQ_MediaTypeTitle")
                        .IsUnique();

                    b.ToTable("MediaTypes", "dbo");
                });

            modelBuilder.Entity("CORE.Entities.WatchList", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("MediaId")
                        .HasColumnType("int");

                    b.Property<bool>("Watched")
                        .HasColumnType("bit");

                    b.HasKey("UserId", "MediaId")
                        .HasName("PK_UserId_MediaId");

                    b.HasIndex("MediaId");

                    b.ToTable("WatchLists", "dbo");
                });

            modelBuilder.Entity("CORE.Entities.Media", b =>
                {
                    b.HasOne("CORE.Entities.MediaType", "MediaType")
                        .WithMany("Medias")
                        .HasForeignKey("MediaTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("MediaType");
                });

            modelBuilder.Entity("CORE.Entities.WatchList", b =>
                {
                    b.HasOne("CORE.Entities.Media", "Media")
                        .WithMany("WatchLists")
                        .HasForeignKey("MediaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Media");
                });

            modelBuilder.Entity("CORE.Entities.Media", b =>
                {
                    b.Navigation("WatchLists");
                });

            modelBuilder.Entity("CORE.Entities.MediaType", b =>
                {
                    b.Navigation("Medias");
                });
#pragma warning restore 612, 618
        }
    }
}
